#!/bin/bash

# Check if main config file exists
if [[ -f /etc/securedl/main.cfg ]]
        then
                source /etc/securedl/main.cfg
        else    
                echo "main.cfg was not detected. I suggest you install first."
fi

runCommand=$1
runCondition=$2
DATE=$(date)
startDir=$(pwd)

# Condition Tests
if [[ ("$runCommand" == "test") ]];
    then
        clear
        echo "allowedNetwork is set to $allowedNetwork"
        echo "transmissionUsername is set to $transmissionUsername"
        echo "transmissionPassword is set to $transmissionPassword"
        echo "vpnConfigDirectory is set to $vpnConfigDirectory"
        echo "sdlConfigDirectory is set to $sdlConfigDirectory"
fi

# Removal Script
if [[ ("$runCommand" == "remove") ]];
    then
        clear
        if [[ -f /etc/securedl/main.cfg ]]
            then
                rm /etc/securedl/main.cfg
                echo "/etc/securedl/main.cfg was deleted."
            else
                echo "/etc/securedl/main.cfg does not exist or could not be deleted."
        fi

        if [[ -f /etc/securedl/profiles.list ]]
            then
                rm /etc/securedl/profiles.list
                echo "/etc/securedl/profiles.list was deleted."
            else
                echo "/etc/securedl/profiles.list does not exist or could not be deleted."
        fi
        
        if [[ -d /etc/securedl ]]
            then
                rm -rf /etc/securedl
                echo "/etc/securedl was deleted."
            else
                echo "The main config directory does not exist or could not be deleted."
        fi
        
        if [[ -f /usr/bin/securedl ]]
            then
                rm /usr/bin/securedl
                echo "/usr/bin/securedl was deleted."
            else
                echo "/usr/bin/securedl does not exist or could not be deleted."
        fi
fi


# Quick Installation Script
if [[ ("$runCommand" == "install") ]];
    then
        clear
        echo "Creating securedl config directory."
        mkdir -p /etc/securedl
        echo "Copying main.cfg to /etc/securedl/main.cfg"
        cp main.cfg /etc/securedl/main.cfg
        echo "Copying securedl to /usr/bin/securedl"
        cp securedl /usr/bin/securedl
        echo "Setting /usr/bin/securedl as executable"
        chmod +x /usr/bin/securedl
fi


# Generate the list of available OpenVPN client profiles.
if [[ ("$runCommand" == "scan") ]];
    then
        clear
        if [[ -f $sdlConfigDirectory/profiles.list ]]
            then
                    rm $sdlConfigDirectory/profiles.list
            else    
                    touch $sdlConfigDirectory/profiles.list
        fi
        echo "Scanning for available VPN profiles..."
        cd $vpnConfigDirectory
        fileList=( *.conf )
        # fileList=$(ls /etc/openvpn/client)
        echo "The following connections are available:"
        echo "========================================"
        for filename in "${fileList[@]}"; do
            echo "[Found config file]: $filename"
            echo ${filename%%.*} >> $sdlConfigDirectory/profiles.list
        done
        echo "List generation complete."
        exit 0
fi

# Scan for any running Transmission or previously detected OpenVPN profiles.
if [[ ("$runCommand" == "status") ]];
    then
        clear
        echo "Showing detected VPN profiles..."
        cd $sdlConfigDirectory
        readarray fileList < profiles.list
        echo "The following connections are available:"
        echo "========================================"
        for filename in "${fileList[@]}"; do
            echo "[Found config file]: $filename"
        done
        exit 0
fi

startSecureDL(){
    sudo systemctl start openvpn-client@$1
    echo "VPN started using $runCondition"
    sleep 10
    echo "Launching Transmission Background Service."
    transmission-daemon --auth --username $transmissionUsername --password $transmissionPassword --port 9091 --allowed $allowedNetwork
}

stopSecureDL(){
    echo "Terminating the Transmission Background Service."
    sudo killall transmission-da
    sleep 5
    sudo systemctl stop openvpn-client@$1
    echo "$1 VPN connection has been stopped."
}

# If start command is issued
if [[ ("$runCommand" == "start") ]];
    then
        clear
        startSecureDL $runCondition
        exit 0
fi

# If stop command is issued
if [[ ("$runCommand" == "stop") ]];
    then
        clear
        stopSecureDL $runCondition
        exit 0
fi